1) Remote notifications for both iOS and Android has few similar key principals.
a) The app registers itself with notification server (Google/Apple)
b) Registration server returns string token (different sizes on iOS and Android)
c) This registration token should be passed to your app server. This app server can then send requests to notification server specifying registration token. Notification server in turn will send push notification to the device(s)
d) There is no guarantee that particular notification will be delivered. Notification can be delivered after some delay.
e) Notification's payload may have simple structure or may be much more complex, with different options which will configure how the notification will appear
f) registration tokens may change after some time. The app should handle such cases and update app remote server accordingly
2) [Android] In case notification server received few notifications (for same device), only last will be sent. This can be configured
3) The demo code shows how to register the app with notification server and how to process incomming notification. However, there are places which you will need to add. For example, you will have to add the code which sends the obtained token to your server.
4) At the same time these demo apps can be tested localy without app remote server. You will need to send push notifications manually in these cases. I was using 2 desktop apps for this purpose (both open source, have code but also have compiled binaries). For Android: https://gcm.codeplex.com/; for iOS: https://github.com/noodlewerk/NWPusher. Current demo traces obtained tokens into concole for convenience.
5) There is one unpleasant thing with Android during testing. It seems that you need to manually uninstall the app between different compilations to get correct token. Somehow, when you run the app from VS when it is already installed, it is re-installed in some "incorrect way". The app still returns registration token, but it is no longer valid. Complete uninstall then reintall fix this issue. It may not happen in release mode though (i tested in debug mode only).
6) The demo covers just required minimum to get the notifications. However, there are a lot more possible scenarios of working with received notification (e.g., they can run some code in the background, fetch data, do other interesting things). There are also posibilities to create much more complex visual representation of received notification (not just message and badge number, but also buttons with actions, text input fields etc etc). These topics are not covered as they are use-case specific.
7) As I have mentioned, Android does not have default functionality to show the app icon badge. The possible workaround is to provide some number in the notification paylod and display it as part of notification UI (e.g., in title, something like "25 pending messages..."). Some hardware vendors provide their own modification to Android OS which allows such badges. However, I cannot test it on my side because I have Nexus device with vanilla Android. You may read some info here: 
http://stackoverflow.com/questions/17565307/how-to-display-count-of-notifications-in-app-launcher-icon
http://stackoverflow.com/questions/20216806/how-to-add-a-notification-badge-count-to-application-icon-on-sony-xperia-devices
http://stackoverflow.com/questions/17510419/how-does-facebook-add-badge-numbers-on-app-icon-in-android
8) It may happen that you may or may not need to use some PubNub SDK. I checked and it has the one for Xamarin. I am not sure if it is mandatory with just push notification. Possibly yes, for example, it may facilitate all those things of sending token to app server.
9) Currently, Google suggests to use Firebase notification (FCM). However, it's still impossible with Xamarin.Forms (or to be more correct, there is no easy way by using SDK). Xamarin Firebase SDK has been released just recently and requires latest other Xamarin Google SDKs (and Xamarin.Forms, as always, does not support latest versions). Thus, the demo uses GCM, which is still supported.
10) You need small preparatino steps before you can utilize push notifications:
a) [Android] You need to register new project on Firebase (yes, we are using GCM but still create the project on Firebase). The process there is pretty straightforward. What you will need is SenderId. This is a numeric value. To find it, open Firebase project, go to Settings, and open Cloud Messaging tab. Paste this SenderId in GcmRegistrationIntentService, SenderId field. You may also need Server key (on same page) if you decide to test notification with apps mentioned earlier.
b) [iOS] You need to create explicit app id on apple dev portal (wildcard app id will not work). You need to enable push notifications for that ID. Once enabled, you will see that few buttons appear there to add sertificates. You need to create dedicated sertificates to be able to send push notifications. Note, that certificate can be for sandboxed environment and production (normally, you use the former during testing).
11) Pay attention to the android app manifest and what permissions are there
12) Current simple iOS demo does not requires specific permissions. However, there is also a possibility to perform some background tasks in response to notification. You have to set Remote notification background task flag in app plist for this.
13) More about structure of Android notifications: https://developers.google.com/cloud-messaging/http-server-ref